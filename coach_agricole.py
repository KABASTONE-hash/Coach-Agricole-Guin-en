import streamlit as st
import openai
import os
import json
from PIL import Image

# Chargement des donn√©es JSON
def charger_json(path):
    with open(path, "r", encoding="utf-8") as f:
        return json.load(f)

prix_data = charger_json("data/marches.json")
meteo_data = charger_json("data/meteo.json")

# Configuration API
openai.api_key = st.secrets["openai_api_key"] if "openai_api_key" in st.secrets else os.getenv("OPENAI_API_KEY")

# Page config
st.set_page_config(page_title="Coach Agricole Guin√©en", page_icon="üåø")

# Logo
if os.path.exists("image.png"):
    image = Image.open("image.png")
    st.image(image, width=200)

# Titre
st.markdown("<h1 style='text-align: center;'>üåæ Coach Agricole Guin√©en</h1>", unsafe_allow_html=True)
st.write("Pose ta question sur une culture, une maladie ou les prix du march√©. Tu recevras des conseils agricoles adapt√©s √† la Guin√©e.")

# Choix culture et r√©gion
culture = st.selectbox("üå± Choisis ta culture :", list(prix_data.keys()))
ville = st.selectbox("üìç Dans quelle r√©gion ?", list(prix_data[culture].keys()))

# Zone de texte
question = st.text_area("‚ùì Pose ta question agricole :", placeholder="Ex : Ma plante jaunit, que faire ?")
go = st.button("üß† Obtenir un conseil")

# Liste de pays non autoris√©s
pays_non_autorises = [
    "france", "canada", "s√©n√©gal", "mali", "c√¥te d‚Äôivoire", "usa", "paris", "dakar",
    "bamako", "abidjan", "new york", "bruxelles", "casablanca", "maroc"
]

# Prompt syst√®me
SYSTEM_PROMPT = """
Tu es un conseiller agricole guin√©en. Tu aides les petits agriculteurs √† am√©liorer leurs cultures.
Tu fournis des conseils selon la r√©gion, le climat, les maladies fr√©quentes, les produits accessibles et les prix du march√©.

Sois simple, pratique et compr√©hensible.
"""

# Traitement
if go and question.strip():
    question_clean = question.lower()

    if any(pays in question_clean for pays in pays_non_autorises):
        st.warning("üö´ Ce coach est uniquement destin√© √† la R√©publique de Guin√©e.")
    else:
        prix = prix_data.get(culture, {}).get(ville)
        meteo = meteo_data.get(ville, {})

        full_question = f"{question.strip()} (Culture : {culture}, R√©gion : {ville})"
        with st.spinner("Consultation du conseiller agricole‚Ä¶"):
            try:
                client = openai.OpenAI()
                response = client.chat.completions.create(
                    model="gpt-3.5-turbo",
                    messages=[
                        {"role": "system", "content": SYSTEM_PROMPT},
                        {"role": "user", "content": full_question}
                    ],
                    temperature=0.7,
                    max_tokens=800
                )
                answer = response.choices[0].message.content
                st.success("Voici ton conseil üëá")
                st.markdown(answer)

                if prix:
                    st.info(f"üí∞ Prix estim√© √† {ville} pour {culture.lower()} : **{prix:,} GNF le sac**")
                if meteo:
                    st.info(f"üå¶Ô∏è M√©t√©o √† {ville} : {meteo['m√©t√©o']} | Humidit√© : {meteo['humidit√©']} | Pluie : {meteo['prochaine_pluie']}")

            except Exception as e:
                st.error(f"Une erreur est survenue : {e}")
else:
    st.info("Remplis tous les champs pour recevoir un conseil agricole.")
